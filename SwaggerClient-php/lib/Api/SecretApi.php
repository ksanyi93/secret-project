<?php
/**
 * SecretApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\Model\Secret;
use Swagger\Client\ObjectSerializer;

/**
 * SecretApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SecretApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addSecret
     *
     * Add a new secret
     *
     * @param string $secret This text will be saved as a secret (required)
     * @param int $expire_after_views The secret won&#39;t be available after the given number of views. It must be greater than 0. (required)
     * @param int $expire_after The secret won&#39;t be available after the given time. The value is provided in minutes. 0 means never expires (required)
     *
     * @return Secret
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     */
    public function addSecret($secret, $expire_after_views, $expire_after)
    {
        list($response) = $this->addSecretWithHttpInfo($secret, $expire_after_views, $expire_after);
        return $response;
    }

    /**
     * Operation addSecretWithHttpInfo
     *
     * Add a new secret
     *
     * @param string $secret This text will be saved as a secret (required)
     * @param int $expire_after_views The secret won&#39;t be available after the given number of views. It must be greater than 0. (required)
     * @param int $expire_after The secret won&#39;t be available after the given time. The value is provided in minutes. 0 means never expires (required)
     *
     * @return array of \Swagger\Client\Model\Secret, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException*@throws GuzzleException
     * @throws ApiException|GuzzleException on non-2xx response
     */
    public function addSecretWithHttpInfo($secret, $expire_after_views, $expire_after)
    {
        $returnType = '\Swagger\Client\Model\Secret';
        $request = $this->addSecretRequest($secret, $expire_after_views, $expire_after);

        return $this->extracted($request, $returnType);
    }

    /**
     * Operation addSecretAsync
     *
     * Add a new secret
     *
     * @param  string $secret This text will be saved as a secret (required)
     * @param  int $expire_after_views The secret won&#39;t be available after the given number of views. It must be greater than 0. (required)
     * @param  int $expire_after The secret won&#39;t be available after the given time. The value is provided in minutes. 0 means never expires (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addSecretAsync($secret, $expire_after_views, $expire_after)
    {
        return $this->addSecretAsyncWithHttpInfo($secret, $expire_after_views, $expire_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSecretAsyncWithHttpInfo
     *
     * Add a new secret
     *
     * @param  string $secret This text will be saved as a secret (required)
     * @param  int $expire_after_views The secret won&#39;t be available after the given number of views. It must be greater than 0. (required)
     * @param  int $expire_after The secret won&#39;t be available after the given time. The value is provided in minutes. 0 means never expires (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function addSecretAsyncWithHttpInfo($secret, $expire_after_views, $expire_after)
    {
        $returnType = '\Swagger\Client\Model\Secret';
        $request = $this->addSecretRequest($secret, $expire_after_views, $expire_after);

        return $this->getThen($request, $returnType);
    }

    /**
     * Create request for operation 'addSecret'
     *
     * @param  string $secret This text will be saved as a secret (required)
     * @param  int $expire_after_views The secret won&#39;t be available after the given number of views. It must be greater than 0. (required)
     * @param  int $expire_after The secret won&#39;t be available after the given time. The value is provided in minutes. 0 means never expires (required)
     *
     * @return Request
     *@throws InvalidArgumentException
     */
    protected function addSecretRequest($secret, $expire_after_views, $expire_after)
    {
        // verify the required parameter 'secret' is set
        if ($secret === null || (is_array($secret) && count($secret) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $secret when calling addSecret'
            );
        }
        // verify the required parameter 'expire_after_views' is set
        if ($expire_after_views === null || (is_array($expire_after_views) && count($expire_after_views) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $expire_after_views when calling addSecret'
            );
        }
        // verify the required parameter 'expire_after' is set
        if ($expire_after === null || (is_array($expire_after) && count($expire_after) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $expire_after when calling addSecret'
            );
        }

        $resourcePath = '/secret';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($secret !== null) {
            $formParams['secret'] = ObjectSerializer::toFormValue($secret);
        }
        // form params
        if ($expire_after_views !== null) {
            $formParams['expireAfterViews'] = ObjectSerializer::toFormValue($expire_after_views);
        }
        // form params
        if ($expire_after !== null) {
            $formParams['expireAfter'] = ObjectSerializer::toFormValue($expire_after);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSecretByHash
     *
     * Find a secret by hash
     *
     * @param string $hash Unique hash to identify the secret (required)
     *
     * @return Secret
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     */
    public function getSecretByHash($hash)
    {
        list($response) = $this->getSecretByHashWithHttpInfo($hash);
        return $response;
    }

    /**
     * Operation getSecretByHashWithHttpInfo
     *
     * Find a secret by hash
     *
     * @param string $hash Unique hash to identify the secret (required)
     *
     * @return array of \Swagger\Client\Model\Secret, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException*@throws GuzzleException
     * @throws ApiException|GuzzleException on non-2xx response
     */
    public function getSecretByHashWithHttpInfo($hash)
    {
        $returnType = '\Swagger\Client\Model\Secret';
        $request = $this->getSecretByHashRequest($hash);

        return $this->extracted($request, $returnType);
    }

    /**
     * Operation getSecretByHashAsync
     *
     * Find a secret by hash
     *
     * @param  string $hash Unique hash to identify the secret (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSecretByHashAsync($hash)
    {
        return $this->getSecretByHashAsyncWithHttpInfo($hash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSecretByHashAsyncWithHttpInfo
     *
     * Find a secret by hash
     *
     * @param  string $hash Unique hash to identify the secret (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getSecretByHashAsyncWithHttpInfo($hash)
    {
        $returnType = '\Swagger\Client\Model\Secret';
        $request = $this->getSecretByHashRequest($hash);

        return $this->getThen($request, $returnType);
    }

    /**
     * Create request for operation 'getSecretByHash'
     *
     * @param  string $hash Unique hash to identify the secret (required)
     *
     * @return Request
     *@throws InvalidArgumentException
     */
    protected function getSecretByHashRequest($hash)
    {
        // verify the required parameter 'hash' is set
        if ($hash === null || (is_array($hash) && count($hash) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $hash when calling getSecretByHash'
            );
        }

        $resourcePath = '/secret/{hash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hash !== null) {
            $resourcePath = str_replace(
                '{' . 'hash' . '}',
                ObjectSerializer::toPathValue($hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * @param Request $request
     * @param $returnType
     * @return array
     * @throws ApiException
     * @throws GuzzleException
     */
    public function extracted(Request $request, $returnType)
    {
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Swagger\Client\Model\Secret',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }

    /**
     * @param Request $request
     * @param $returnType
     * @return PromiseInterface
     */
    public function getThen(Request $request, $returnType)
    {
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
}
